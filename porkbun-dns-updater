#!/bin/bash

helpinfo() {
    echo ""
    echo "Usage: ./porkbun-dns-updater [OPTION] [VALUE]"
    echo "Updates IP address of porkbun.com DNS A record using porkbun API and ifconfig.me. Requires jq installed."
    echo "Requires option -f and .json with the key:VALUE pairs:"
    echo ""
    echo "  \"secretapikey\":       Porkbun secret API key"
    echo "  \"apikey\":             Porkbun API key"
    echo "  \"domain\":             domain (domain.tld)"
    echo "  \"recordid\":           Porkbun A record ID"
    echo ""
    echo "Example: ./porkbun-dns-updater -f update.json"
    echo ""
}

jsonreadfail() {
    echo "[PBDU] ERROR: There was a problem reading the .json file. Stopping..."
    exit
}

recordretreivefail() {
    echo "[PBDU \"$subdomain$dot$domain\"] ERROR: There was a problem retrieving the Porkbun A record. Stopping..."
    exit
}

ifconfigfail() {
    echo "[PBDU \"$subdomain$dot$domain\"] ERROR: There was a problem communicating with ifconfig.me. Stopping..."
    exit
}

while getopts f:h flag; do
  case "${flag}" in
    f) file=${OPTARG};;
    h)
        helpinfo
        exit;;
  esac
done

secretapikey=$(jq '.secretapikey' $file) || jsonreadfail
secretapikey="${secretapikey//\"}"
apikey=$(jq '.apikey' $file) || jsonreadfail
apikey="${apikey//\"}"
domain=$(jq '.domain' $file) || jsonreadfail
domain="${domain//\"}"
# type=$(jq '.type' $file) || jsonreadfail
# type="${type//\"}"
type="A"
subdomain=$(jq '.subdomain' $file) || jsonreadfail
subdomain="${subdomain//\"}"

if [[ $subdomain = "" ]]; then
    dot=""
    else
    dot="."
fi

echo "[PBDU] Record for: \"$subdomain$dot$domain\""

payload_json=$(
    jq --null-input \
        --arg secretapikey "$secretapikey" \
        --arg apikey "$apikey" \
        '$ARGS.named'
)

echo "[PBDU \"$subdomain$dot$domain\"] Retrieving IP addresses..."

response_json=$(curl -s -X POST -H "Content-Type: application/json" -d "$payload_json" https://porkbun.com/api/json/v3/dns/retrieveByNameType/$domain/$type/$subdomain)
response=$(jq '.status' <<< "$response_json")
if [[ $response != "\"SUCCESS\"" ]] ; then
    recordretreivefail
fi

oldip=$(jq '.records[]' <<< "$response_json" | jq '.content')
oldip="${oldip//\"}"
echo "[PBDU \"$subdomain$dot$domain\"] Porkbun A record: $oldip"

newip=$(curl -s ifconfig.me) 
echo "[PBDU \"$subdomain$dot$domain\"] Current IP address: $newip" || ifconfigfail
if [[ $newip == $oldip ]] ; then
    echo "[PBDU \"$subdomain$dot$domain\"] IP address has not changed. Stopping..."
    exit
    elif [[ $newip =~ [^0-9.] ]]; then
    echo "[PBDU \"$subdomain$dot$domain\"] New IP address looks strange. Stopping..." 
    exit
fi

update_json=$(
    jq --null-input \
        --arg secretapikey "$secretapikey" \
        --arg apikey "$apikey" \
        --arg content "$newip" \
        '$ARGS.named'
)
echo "[PBDU \"$subdomain$dot$domain\"] Created new A record JSON payload."

result_json=$(curl -s -X POST -H "Content-Type: application/json" -d "$update_json" https://porkbun.com/api/json/v3/dns/editByNameType/$domain/$type/$subdomain)
result=$(jq '.status' <<< "$result_json")

if [[ $result == "\"SUCCESS\"" ]] ; then
    echo "[PBDU \"$subdomain$dot$domain\"] SUCCESS: Updated Porkbun A record for barba.link."
    exit
    else
    echo "[PBDU \"$subdomain$dot$domain\"] ERROR: Something went wrong."
    exit
fi